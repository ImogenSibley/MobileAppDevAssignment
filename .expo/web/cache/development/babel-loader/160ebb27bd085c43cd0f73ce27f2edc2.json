{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Task from \"./components/Task\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      task = _useState2[0],\n      setTask = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskItems = _useState4[0],\n      setTaskItems = _useState4[1];\n\n  var handleAddTask = function handleAddTask() {\n    Keyboard.dismiss();\n    setTaskItems([].concat(_toConsumableArray(taskItems), [task]));\n    setTask(null);\n  };\n\n  var completeTask = function completeTask(index) {\n    var itemsCopy = _toConsumableArray(taskItems);\n\n    itemsCopy.splice(index, 1);\n    setTaskItems(itemsCopy);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(ScrollView, {\n      contentContainerStyle: {\n        flexGrow: 1\n      },\n      keyboardShouldPersistTaps: \"handled\",\n      children: _jsxs(View, {\n        style: styles.tasksWrapper,\n        children: [_jsx(Text, {\n          style: styles.sectionTitle,\n          children: \"Today's tasks\"\n        }), _jsx(View, {\n          style: styles.items,\n          children: taskItems.map(function (item, index) {\n            return _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return completeTask(index);\n              },\n              children: _jsx(Task, {\n                text: item\n              })\n            }, index);\n          })\n        })]\n      })\n    }), _jsxs(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : \"height\",\n      style: styles.writeTaskWrapper,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: 'Write a task',\n        value: task,\n        onChangeText: function onChangeText(text) {\n          return setTask(text);\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleAddTask();\n        },\n        children: _jsx(View, {\n          style: styles.addWrapper,\n          children: _jsx(Text, {\n            style: styles.addText,\n            children: \"+\"\n          })\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED'\n  },\n  tasksWrapper: {\n    paddingTop: 80,\n    paddingHorizontal: 20\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  items: {\n    marginTop: 30\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    width: 250\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1\n  },\n  addText: {}\n});","map":{"version":3,"sources":["E:/Year 3/Mobile App Dev/MobileAppDevAssignment/App.js"],"names":["React","useState","Task","App","task","setTask","taskItems","setTaskItems","handleAddTask","Keyboard","dismiss","completeTask","index","itemsCopy","splice","styles","container","flexGrow","tasksWrapper","sectionTitle","items","map","item","Platform","OS","writeTaskWrapper","input","text","addWrapper","addText","StyleSheet","create","flex","backgroundColor","paddingTop","paddingHorizontal","fontSize","fontWeight","marginTop","position","bottom","width","flexDirection","justifyContent","alignItems","paddingVertical","borderRadius","borderColor","borderWidth","height"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport { KeyboardAvoidingView, StyleSheet, Text, View, TextInput, TouchableOpacity, Keyboard, ScrollView } from 'react-native';\r\nimport Task from './components/Task';\r\n\r\nexport default function App() {\r\n  const [task, setTask] = useState();\r\n  const [taskItems, setTaskItems] = useState([]);\r\n\r\n  const handleAddTask = () => {\r\n    Keyboard.dismiss();\r\n    setTaskItems([...taskItems, task])\r\n    setTask(null);\r\n  }\r\n\r\n  const completeTask = (index) => {\r\n    let itemsCopy = [...taskItems];\r\n    itemsCopy.splice(index, 1);\r\n    setTaskItems(itemsCopy)\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {/* Added this scroll view to enable scrolling when list gets longer than the page */}\r\n      <ScrollView\r\n        contentContainerStyle={{\r\n          flexGrow: 1\r\n        }}\r\n        keyboardShouldPersistTaps='handled'\r\n      >\r\n\r\n      {/* Today's Tasks */}\r\n      <View style={styles.tasksWrapper}>\r\n        <Text style={styles.sectionTitle}>Today's tasks</Text>\r\n        <View style={styles.items}>\r\n          {/* This is where the tasks will go! */}\r\n          {\r\n            taskItems.map((item, index) => {\r\n              return (\r\n                <TouchableOpacity key={index}  onPress={() => completeTask(index)}>\r\n                  <Task text={item} /> \r\n                </TouchableOpacity>\r\n              )\r\n            })\r\n          }\r\n        </View>\r\n      </View>\r\n        \r\n      </ScrollView>\r\n\r\n      {/* Write a task */}\r\n      {/* Uses a keyboard avoiding view which ensures the keyboard does not cover the items on screen */}\r\n      <KeyboardAvoidingView \r\n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n        style={styles.writeTaskWrapper}\r\n      >\r\n        <TextInput style={styles.input} placeholder={'Write a task'} value={task} onChangeText={text => setTask(text)} />\r\n        <TouchableOpacity onPress={() => handleAddTask()}>\r\n          <View style={styles.addWrapper}>\r\n            <Text style={styles.addText}>+</Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n      </KeyboardAvoidingView>\r\n      \r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#E8EAED',\r\n  },\r\n  tasksWrapper: {\r\n    paddingTop: 80,\r\n    paddingHorizontal: 20,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold'\r\n  },\r\n  items: {\r\n    marginTop: 30,\r\n  },\r\n  writeTaskWrapper: {\r\n    position: 'absolute',\r\n    bottom: 60,\r\n    width: '100%',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center'\r\n  },\r\n  input: {\r\n    paddingVertical: 15,\r\n    paddingHorizontal: 15,\r\n    backgroundColor: '#FFF',\r\n    borderRadius: 60,\r\n    borderColor: '#C0C0C0',\r\n    borderWidth: 1,\r\n    width: 250,\r\n  },\r\n  addWrapper: {\r\n    width: 60,\r\n    height: 60,\r\n    backgroundColor: '#FFF',\r\n    borderRadius: 60,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderColor: '#C0C0C0',\r\n    borderWidth: 1,\r\n  },\r\n  addText: {},\r\n});\r\n"]},"metadata":{},"sourceType":"module"}